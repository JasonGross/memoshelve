name: Publish Python 🐍 distribution 📦 to PyPI or TestPyPI

on:
  release:
    types: [published] # Only publish to pip when we formally publish a release
  # For more on how to formally release on Github, read https://help.github.com/en/articles/creating-releases
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-distribution:
    name: Build distribution 📦
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"
    - name: Bump package version with local extension
      run: |
        current_version="$(uv version | cut -d' ' -f2)"
        new_version="${current_version}.dev$(date +%s)"
        uv version "$new_version"
        sed -i "s/^__version__ = .*/__version__ = \"$new_version\"/g" __init__.py
      if: ${{ ! ( startsWith(github.ref, 'refs/tags/') && github.event_name == 'release' ) }}
    - name: Build a binary wheel and a source tarball
      run: uv build
    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Store the file modifications
      uses: actions/upload-artifact@v4
      with:
        name: python-package-modifications
        path: __init__.py pyproject.toml

  publish-to-pypi:
    name: >-
      PiPI: Publish Python 🐍 distribution 📦
    if: ${{ startsWith(github.ref, 'refs/tags/') && github.event_name == 'release' }} # only publish to PyPI on tag pushes
    needs:
    - build-distribution
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/memoshelve
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Download all the file modifications
      uses: actions/download-artifact@v4
      with:
        name: python-package-modifications
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    - run: git --no-pager diff
    - name: Publish distribution 📦 to PyPI
      run: uv publish

  publish-to-testpypi:
    name: >-
      TestPyPI: Publish Python 🐍 distribution 📦
    if: ${{ ( ! ( startsWith(github.ref, 'refs/tags/') && github.event_name == 'release' ) ) && ( ! ( github.event.pull_request.head.repo.fork ) ) }} # only publish to TestPyPI on non-tag pushes to non-forks (forks don't have permission)
    needs:
    - build-distribution
    runs-on: ubuntu-latest

    environment:
      name: testpypi
      url: https://test.pypi.org/p/memoshelve

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Download all the file modifications
      uses: actions/download-artifact@v4
      with:
        name: python-package-modifications
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    - run: git --no-pager diff
    - name: Publish distribution 📦 to TestPyPI
      run: uv publish --index testpypi

  check-publish:
    runs-on: ubuntu-latest
    needs:
    - publish-to-testpypi
    if: ${{ always() && ! ( startsWith(github.ref, 'refs/tags/') && github.event_name == 'release' ) }}
    steps:
    - run: echo 'The triggering workflow (publish-to-testpypi) passed'
      if: ${{ needs.publish-to-testpypi.result == 'success' }}
    - run: echo 'The triggering workflow (publish-to-testpypi) failed' && false
      if: ${{ needs.publish-to-testpypi.result != 'success' }}


  github-release:
    name: >-
      Sign the Python 🐍 distribution 📦 with Sigstore
      and upload them to GitHub Release
    if: ${{ startsWith(github.ref, 'refs/tags/') && github.event_name == 'release' }} # only publish to PyPI on tag pushes
    needs:
    - publish-to-pypi
    runs-on: ubuntu-latest

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - run: find dist
    - run: ls -la dist
    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v3.0.1
      with:
        inputs: >-
          ./dist/*

  bump-package-version:
    name: Bump package version
    permissions:
      contents: write
      pull-requests: write
      actions: read
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') && github.event_name == 'release' }} # only publish to PyPI on tag pushes

    steps:
    - uses: actions/checkout@v4
    - name: Bump Package version
      id: bumpPackageViaPush
      run: |
        new_version="$(uv version --bump patch --dry-run | grep -o '=>.*' | sed 's/=> *//g')""
        if [ -z "$new_version" ]; then
          uv version --bump patch --dry-run
          exit 1
        fi
        uv version --bump patch
        sed -i "s/^__version__ = .*/__version__ = \"$new_version\"/g" __init__.py
        remote_repo="https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
        git config http.sslVerify false
        git config user.name "Automated Publisher"
        git config user.email "actions@users.noreply.github.com"
        git remote add publisher "${remote_repo}"
        git remote update
        git show-ref # useful for debugging
        git branch --verbose

        git checkout -b temp
        git branch -D main || true
        git checkout -b main publisher/main
        git add pyproject.toml __init__.py
        timestamp=$(date -u)
        git commit -m "Automated Package Version Bump: ${timestamp} ${GITHUB_SHA}"
        git push publisher main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: always()
    - name: Create Pull Request
      run: |
        NEW_PR_URL=$(gh pr create \
          --title "Version Bump" \
          --body "This PR is auto-generated by GitHub CLI." \
          --label "automated pr"
        gh pr merge --auto --squash --delete-branch "$NEW_PR_URL"
        echo "Successfully created and set PR ${NEW_PR_URL} to automerge."
      if: failure() && steps.bumpPackageViaPush.outcome == 'failure'